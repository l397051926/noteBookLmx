集合类源码阅读 顶级接口是 Iterable (迭代器)
    Iterable 携带泛型T
        成员变量 本身 Iterator
        default forEach()
   Collection 集合的父类下面的包含子类为
          Set
          List
           Map
          SortedSet
          SortedMap
          HashSet
          TreeSet
          ArrayList
          LinkedList
          Vector
          Collections
          Arrays
          AbstractCollection
        包含方法
            大小： size()
            非空校验： isEmpty()
            包含: boolean contains(Object o)
    List 继承 Collection
    java本身的实现有三个
        ArrayList
        Arrays
        LinkedList
        Stack
        Vector
    ArrayList 的实现：
        RandomAccess 快速访问接口，标志这个集合是可以用快速访问的，也就是for 会高于 迭代器 iterators
        Cloneable 可以复制 表示这个类
        transient 表示这个字段不需要序列化
        模式容量 10
        提供了多个构造方法， 一个是提供初始容量，如果为0则给空的数组，如果大于零，则创建固定大小的数组
        无惨构造方法， 会默认给一个空的数组，
        传入集合的构造方法 判断进入集合是否为0 - 0 则给空集合，否则 size给默认集合数，然后判断类型是否相同，不同转换为相同类型数组，里面类型都是Object
        trimToSize 修改空容量
        modCount 扩容次数
        grow（）扩容方法
        最大容量为 Integer 最大值 -8 ，如果超过了就抛出 OutOfMemoryError

HashMap 源码阅读
    首先HashMap 初始 默认容量是16 加载因子是0.75
    HashMap 里面有多种node，第一种node是 普通的node，是链表数据类型
    第二种为 TreeNode 是红黑树构造
    HashMap 的Hash 计算方式为 (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); 也就是 key的hash 异或 key的hash >>>16 防止hash碰撞
    首先 HashMap中保存了一个 数组，数组里存的就是Node 也就是 里面保存了一个链表
    首先看一下 get(key)方法 他调用了 getNode（int hash, Object key）这个方法也就是将 key进行了hash
        里面获取Object 是先查对应数组 也就是 & 当前数组长度 找到具体位置 ，看是否有Node，如果有 看第一个Node是不是对应数据 用 == 和 equals判定
        如果不是 则看这个Node 是不是 TreeNode， 如果是TreeNode， 则使用红黑树的查找元素方式，如果不是 则用链表的查找方式
    接下来看一下 put（key） 调用了 put putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict)
        首先看 数组是否需要初始化 如果初始化 使用 resize() 方法
        其次看对应的节点是否为kong 如果为空直接赋值给node
        如果上面已经有node了，则看他是否是 Treenode 类型 如果是TreeNode类型，则使用TreeNode类型进行添加
        如果不是TreeNode类型 寻找 Node的next是否为空 如果为空 则给对应node值，然后判定一下长度是否超过8个 如果超过则转换成TreeNode
