记录vue 项目搭建过程
    说明： 本项目是一个vlog前端项目，来自网上的一个搭建教程，但是在搭建过程中出现了一些问题，总结一些问题解决方案以及原因
        本项目使用的 是node 版本 v14.17.0 ，npm 版本： 7.15.1 vue 版本: @vue/cli 4.5.13  要降低喂3 版本否则就会坑
        代码地址: https://gitee.com/l397051926/tavern-frontend.git

1. 由于原来系统中安装过vue 2.96版本， 而本教程是3.0版本，所以要针对vue 进行升级
    vue 卸载命令： npm uninstall vue-cli
    重新安装最新版本命令 3.0以上一定会有 @ 这个符号，没有就会升级2.0版本
        npm install -g @vue/cli
        npm install -g @vue/cli@3.11.0

2. 删除失败，因为 npm 版本太旧的原因 升级npm
    npm install -g npm  也可以指定版本 npm -g install npm@6.8.0
    我们在这个时候可以 配置一下 cnpm
    # 安装淘宝npm
    npm install -g cnpm --registry=https://registry.npm.taobao.org

3. 升级后发现 node 版本太低，所以升级node，这个教程里要求node 是10以上版本
    node 只能使用先卸载，在安装的方式 否则无法升级，卸载可以在控制面板下卸载
    安装包下载地址  https://nodejs.org/zh-cn/

4. 接下来就可以搭建项目，如果完成以上条件后，就可以使用 命令
    vue ui 进行安装项目，是一个可视化的安装方式
    1. 可以使用git 方式
    2. 手动配置方式
    3. Babel, Router, Vuex, 去掉： Linter/Fomatter
    4. 选中 Use history mode for router
    5. 选择 不保存配置，生成项目，如果中间出现问题，可以使用
    6. 创建项目中 ing.... 然后git 创建个项目，提交上去， 初始化完成！

5. 我们来看下整个vueblog-vue的项目结构
    ├── README.md            项目介绍
    ├── index.html           入口页面
    ├── build              构建脚本目录
    │  ├── build-server.js         运行本地构建服务器，可以访问构建后的页面
    │  ├── build.js            生产环境构建脚本
    │  ├── dev-client.js          开发服务器热重载脚本，主要用来实现开发阶段的页面自动刷新
    │  ├── dev-server.js          运行本地开发服务器
    │  ├── utils.js            构建相关工具方法
    │  ├── webpack.base.conf.js      wabpack基础配置
    │  ├── webpack.dev.conf.js       wabpack开发环境配置
    │  └── webpack.prod.conf.js      wabpack生产环境配置
    ├── config             项目配置
    │  ├── dev.env.js           开发环境变量
    │  ├── index.js            项目配置文件
    │  ├── prod.env.js           生产环境变量
    │  └── test.env.js           测试环境变量
    ├── mock              mock数据目录
    │  └── hello.js
    ├── package.json          npm包配置文件，里面定义了项目的npm脚本，依赖包等信息
    ├── src               源码目录
    │  ├── main.js             入口js文件
    │  ├── app.vue             根组件
    │  ├── components           公共组件目录
    │  │  └── title.vue
    │  ├── assets             资源目录，这里的资源会被wabpack构建
    │  │  └── images
    │  │    └── logo.png
    │  ├── routes             前端路由
    │  │  └── index.js
    │  ├── store              应用级数据（state）状态管理
    │  │  └── index.js
    │  └── views              页面目录
    │    ├── hello.vue
    │    └── notfound.vue
    ├── static             纯静态资源，不会被wabpack构建。
    └── test              测试文件目录（unit&e2e）
    └── unit              单元测试
        ├── index.js            入口脚本
        ├── karma.conf.js          karma配置文件
        └── specs              单测case目录
        └── Hello.spec.js

6.  当然你安装完后 架构肯定不是这样子，不过无所谓，等到后期可以在扩展

7. 安装element-ui
    cnpm install element-ui --save
    如果安装过程发现安装失败 少包的情况就 少什么安装什么 例如：
     cnpm install  vue@^2.5.17
    然后我们打开项目src目录下的main.js，引入element-ui依赖。
    import Element from 'element-ui'
    import "element-ui/lib/theme-chalk/index.css"
    Vue.use(Element)

8. 安装axios
    接下来，我们来安装axios（http://www.axios-js.com/），
    axios是一个基于 promise 的 HTTP 库，这样我们进行前后端对接的时候，使用这个工具可以提高我们的开发效率。
    cnpm install axios --save

9. 页面路由
    接下来，我们先定义好路由和页面，因为我们只是做一个简单的博客项目，页面比较少，所以我们可以直接先定义好，然后在慢慢开发，这样需要用到链接的地方我们就可以直接可以使用：

    我们在views文件夹下定义几个页面：

    BlogDetail.vue（博客详情页）
    BlogEdit.vue（编辑博客）
    Blogs.vue（博客列表）
    Login.vue（登录页面）
    然后再路由中心配置：
    import Vue from 'vue'
    import VueRouter from 'vue-router'
    import Login from '../views/Login.vue'
    import Blogs from '../views/Blogs.vue'
    import BlogEdit from '../views/BlogEdit.vue'
    import BlogDetail from '../views/BlogDetail.vue'

    Vue.use(VueRouter)

    const routes = [
    {
        path: '/',
        name: 'Index',
        redirect: {name: "Blogs"}
    },
    {
        path: '/blogs',
        name: 'Blogs',
        component: Blogs
    },
    {
        path: '/login',
        name: 'Login',
        component: Login
    },
    {
        path: '/blog/add',
        name: 'BlogAdd',
        component: BlogEdit,
        meta: {
        requireAuth: true
        }
    },
    {
        path: '/blog/:blogId',
        name: 'BlogDetail',
        component: BlogDetail
    },
    {
        path: '/blog/:blogId/edit',
        name: 'BlogEdit',
        component: BlogEdit,
        meta: {
        requireAuth: true
        }
    }
    ]

    const router = new VueRouter({
    mode: 'history',
    base: process.env.BASE_URL,
    routes
    })

    export default router


